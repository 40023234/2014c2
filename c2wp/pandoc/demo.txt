
if、for 與 while包含式

•	if...else :

流程語法中最簡單的 if..else 分支判斷，在 Python 中是這樣寫的：

1from sys import argv

2if len(argv) > 1:

3    print 'Hello, ' + argv[1]

4else:

5    print 'Hello, Guest'	

在 Python 中，使用 : 來做為區塊（Block）開始的標示，相同縮排則表示了相同區塊範圍的程式碼，縮排必須一致，如果想使用四個空白字元縮排，整個程式都必須是四個空白字元縮排，如果要用 Tab 縮排，整個程式都必須使用 Tab 縮排。Python 中的 if..else 也有運算式（Expression）形式，使用上就像是 C 或 Java 的三元運算子 ?:。if 條件式成立的話，會傳回 if 左邊的值，否則傳回 else 右邊的值。例如上面的程式也可以寫為：

1	from sys import argv
2print 'Hello, ' + (argv[1]) if len(argv) > 1 else 'Guest')

•	for 與 while :

Python 中的 for 可用來迭代循序結構的物件。例如想將某 list 的元素都做二次方運算，收集在另一個 list 中的話，可以如下：

1	numbers = [10, 20, 30]

2squares = []

3for number in numbers:

4squares.append(number ** 2)

5print squares

至於 while，一般是用在結束條件不確定的情況下。例如求最大公因數可以如下：

1	print 'Enter two numbers...'

2m = int(raw_input('Number 1: '))

3n = int(raw_input('Number 2: '))

4while n != 0:

5   r = m % n

6   m = n

7   n = r

8print 'GCD: {0}'.format(m)

回頭看看想這個範例：
1	numbers = [10, 20, 30]

2squares = []

3for number in numbers:

4    squares.append(number ** 2)

5print squares

•	for 包含式 :

將某 list 的元素都做二次方運算，收集在另一個 list 中的話，其實還可以使用 for 包含式：

1	numbers = [10, 20, 30]

2print [number ** 2 for number in numbers]

•	這樣的寫法顯然簡潔多了。for 包含式也可以與條件式結合。例如想收集某個 list 中的奇數元素至另一 list，單純使用 for 迴圈，可以如下：

1	numbers = [11, 2, 45, 1, 6, 3, 7, 8, 9]

2odd_numbers = []

3for number in numbers:

4    if number % 2 != 0:

5        odd_numbers.append(number)

6print odd_numbers

使用 for 包含式的程式碼就簡潔多了：

1	numbers = [11, 2, 45, 1, 6, 3, 7, 8, 9]

2print [number for number in numbers if number % 2 != 0]

for 包含式（comprehension）也可以形式巢狀結構，例如有個元素都為 list 的 list，想將其中的 list 元素串起來，也就是將之平坦化，可以如下：

1	lts = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

2print [ele for lt in lts for ele in lt]

當你使用 [] 包圍住 for 包含式（comprehension） 時，會建立 list 實例，如果使用 {}的話，可以建立 set 實例，重複的元素會自動去除。例如：

1>>> {name for name in

2['caterpillar', 'Justin', 'caterpillar', 'openhome']}

3 set(['caterpillar', 'Justin', 'openhome'])
>>>

也可以建立 dict 實例。例如：

1>>> {name : passwd for name, passwd in zip(names, passwds)}

2{'caterpillar': 123456, 'Justin': 13579, 'openhome': 987654}

3>>>

上例中的 zip 函式，就如名稱意義，會將兩個 list 像拉鏈一樣，兩兩相扣在一起為tuple，這些 tuple 元素組成一個新的 list，對於 tuple 元素組成的這個 list，每個tuple 中的一對元素再指定給 name 與 passwd，最後這對 name 與 passwd 組成 dict 的一對鍵值。

（有些人剛接觸 Python 時，不太習慣 for 包含式的寫法，可以來看看 Haskell 中如何表達數學式 S = { 2 . x | x ∈ N, x ≦ 10}，Haskell 是寫為 [2 * x | x <- N, x <= 10] ，跟原本的數學式很相像，用這個方向來理解 Python 的 for 包括式，就比較能夠接受這樣的寫法。）

函式、模組、類別與套件

函式

當發現到兩個程式片段極為類似，只有當中幾個計算用到的數值或變數不同時，例如：

1...

2max1 = a if a > b else b

3...

4max2 = x if x > y else y

5...

可以使用函式來封裝程式片段，將流程中引用不同數值或變數的部份設計為參數，例如：

1def max(a, b):

2return a if a > b else b
    
函式是一種抽象，對流程的抽象，在定義了 max 函式之後，客戶端對求最大值的流程，被抽象為 max(x, y) 這樣的函式呼叫，求值流程實作被隱藏了起來。

在上面的 Python 程式碼中定義了一個函式，在 Python 中，函式不單只是定義，也是個值，舉例而言，你可以如下將 max 指向的函式指定給 maximum 變數，透過 maximum 來叫呼：

1maximum = max

2maximum(10, 20) # 傳回 20

在 Python 中，可以使用 lambda 表示式來定義一個函式，像是…

1lambda a, b: a if a < b else b

這樣的函式稱為 λ 函式或是匿名函式（Anonymous function），當然，你可以將函式指定給變數：

1min = lambda a, b: a if a < b else b

2minimum = min

3min(10, 20) # 傳回10

4minimum(10, 20) # 傳回10

模組

如果你有一大堆數學相關的函式與常數定義，像是：

1def max(a, b):

2return a if a > b else b

3def min(a, b):

4return a if a < b else b

5

6def sum(*numbers): # numbers 接受可變長度引數

7total = 0

8for number in numbers:

9total += number

10return total

11

12pi = 3.141592653589793

13e = 2.718281828459045

該怎麼組織它們，讓它們有別於其他開發者撰寫的函式與常數定義？避免名稱空間衝突問題？像是其他開發者也在其他地方定義了自己的 max 函式？

在 Python 中，模組是幾個重要抽象層的機制之一，也許是最自然的機制之一，只要你建立了一個原始碼檔案 modu.py，你就建立了一個模組 modu，原始碼主檔名就是模組名稱。

import modu 陳述句會在相同目錄下尋找 modu.py，如果沒找到，則會試著尋找在sys.path 中遞迴地尋找 modu.py，如果還是沒有，則會引發 ImportError 例外。

模組提供了名稱空間。模組中的變數、函式與類別，基本上需透過模組的名稱空間來取得。在 Python 中，import、import as 與 from import 是陳述句，可以出現在程式中陳述句可出現的任何位置，它們基本上用來在現有範疇（Scope）中匯入、設定名稱空間，舉例來說，如果先前程式範例是撰寫於 xmath.py 檔案中，那麼以下是一些 import、import as 與 from import 的使用實例，假設這些程式是撰寫在與 xmath.py 相同目錄的另一個 .py 檔案：

1import xmath

2print '# import xmath'

3print xmath.pi

4print xmath.max(10, 5)

5print xmath.sum(1, 2, 3, 4, 5)

6

7print '# import xmath as math'

8import xmath as math # 為 xmath 模組取別名為 math

9print math.e

10

11print '# from xmath import min'

12from xmath import min  # 將 min 複製至目前模組，不建議 from modu import *

13易造成名稱衝突
print min(10, 5)

結果應該會顯示：
 
類別

對於熟悉物件導向的開發者而言，可能會問：「那類別的應用場合呢？」…嗯…當打算將某些狀態與功能黏在一起時…例如你可能原本有這樣的一個 bank.py：

1def account(name, number, balance):

2    return {'name': name, 'number': number, 'balance': balance}

3

4def deposit(acct, amount):

5    if amount <= 0:

6         raise ValueError('amount must be positive')

7    acct['balance'] += amount 

8

9   def withdraw(acct, amount):

10    if amount > acct['balance']:

11        raise RuntimeError('balance not enough')

12    acct['balance'] -= amount

13

14def to_str(acct):

15    return 'Account:' + str(acct)

 當中是有關於帳戶建立、存款、提款等函式，你會這麼使用：
 
1	import bank

2acct = bank.account('Justin', '123-4567', 1000)

3bank.deposit(acct, 500)

4bank.withdraw(acct, 200)

5print bank.to_str(acct)

實際上，bank 中的函式操作，都是與傳入的 dict 實例，也就是代表帳戶狀態的物件高度相關，何不將它們組織在一起呢？這樣比較容易使用些，因此你重新使用類別組織了 bank.py 中的函式：

1	class Account:

2    def __init__(self, name, number, balance):

3        self.name = name

4        self.number = number

5        self.balance = balance

6

7    def deposit(self, amount):

8        if amount <= 0:

9             raise ValueError('amount must be positive')

10        self.balance += amount

11

12    def withdraw(self, amount):

13        if amount > self.balance:

14            raise RuntimeError('balance not enough')

15        self.balance -= amount

16

17    def __str__(self):

18        return 'Account({0}, {1}, {2})'.format(

19            self.name, self.number, self.balance)

在 Account 類別中，__init__ 定義了物件的初始流程，取代了原本的 account 函式，注意到每個類別中的函式（或說是方法），首個參數「必定」接受物件本身，慣例上使用 self 名稱，相當於其他程式語言中 this 的概念，你可以說這是 Python 中「Explicit is better than implicit」的哲學，不過其實這還有讓類別動態調有時更為方便的實際意義，這是進階議題，這六個小時的課程中就不談了，有機會看看 Python 的專門書籍，應該都會談到…
在類別中還定義了 __str__，你應該還記得 Python Tutorial 第二堂（1）數值與字串型態中，談過 __str__ 與 __repr__ 的差別吧？忘記的話，記得回頭複習一下… 在上面的程式中，實際示範了如何在類別中定義 __str__ 函式。

如此定義之後，客戶端在使用上就容易得多了…

1	import bank

2acct = bank.Account('Justin', '123-4567', 1000)

3acct.deposit(500)

4acct.withdraw(200)

5print acct

是的！容易使用！在討論物件導向時，大家總是愛談可重用性（Reusability），然而要談到重用性的話，函式的重用性還高上許多，在考量物件導向時，易用性（Usability）其實才是它的重點。

套件

假設現在你有一些 .py 檔案，別人同樣也有一堆 .py 檔案，你們的檔案現在得放在同一專案中，那麼檔案名稱衝突是有可能發生的，最好是為你們的 .py 檔案分別開設目錄。使用 Python 時，你可以在開設的目錄中放個 __init__.py 檔案，這樣 Python 就會將這個目錄視為一個套件，而目錄名稱就是套件名稱。

使用 import pack.modu 陳述時，Python 會尋找 pack 目錄，看看裏頭是否有 __init__.py 檔案，然後看看目錄中是否有個 modu.py 檔案。__init__.py 檔案空白也無所謂，實際上當中也可以寫些程式碼，用來執行這個套件中都會需要的初始工作，不過慣例上，除非你有真正不得已的理由，請保持 __init__.py 檔案空白。在找到模組後，實際上會執行其中頂層範疇中的程式碼，之後，模組中的變數、函式、類別等名稱，可以透過 pack.modu 來取得。

練習 5：運用模組、類別與套件來組織程式

在練習用的檔案中，有個 exercises/exercise5/main.py，裏頭草草寫了一堆函式與變數，以及執行結果輸出的程式碼，請利用這邊介紹的模組、類別與套件，來重新組織當中可重用的程式碼，讓它們可以位於 pycon 套件中適當的類別與模組，數學相關的函式，請置於 xmath 模組中，而帳戶相關的類別定義，請置於 bank 模組中 …

最後，你完成的程式在實體架構上，應該會像是以下的圖片示意（如果不知道怎麼完成實作，記得參考練習用檔案中 solutions/exercise5 的成果 ）：
 
參考資源

if、for 與 while:

http://www.codedata.com.tw/python/python-tutorial-the-2nd-class-2-container-flow-for-comprehension/

函式、模組、類別與套件:

http://www.codedata.com.tw/python/python-tutorial-the-2nd-class-3-function-module-class-package/



[markdown]: http://daringfireball.net/projects/markdown/
[reStructuredText]: http://docutils.sourceforge.net/docs/ref/rst/introduction.html
[S5]: http://meyerweb.com/eric/tools/s5/
[Slidy]: http://www.w3.org/Talks/Tools/Slidy/
[Slideous]: http://goessner.net/articles/slideous/
[HTML]:  http://www.w3.org/TR/html40/
[HTML 5]:  http://www.w3.org/TR/html5/
[XHTML]:  http://www.w3.org/TR/xhtml1/
[LaTeX]: http://www.latex-project.org/
[beamer]: http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer
[ConTeXt]: http://www.pragma-ade.nl/
[RTF]:  http://en.wikipedia.org/wiki/Rich_Text_Format
[DocBook]:  http://www.docbook.org/
[OPML]: http://dev.opml.org/spec2.html
[OpenDocument]: http://opendocument.xml.org/
[ODT]: http://en.wikipedia.org/wiki/OpenDocument
[Textile]: http://redcloth.org/textile
[MediaWiki markup]: http://www.mediawiki.org/wiki/Help:Formatting
[Haddock markup]: http://www.haskell.org/haddock/doc/html/ch03s08.html
[groff man]: http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man7/groff_man.7.html
[Haskell]:  http://www.haskell.org/
[GNU Texinfo]: http://www.gnu.org/software/texinfo/
[Emacs Org-Mode]: http://orgmode.org
[AsciiDoc]: http://www.methods.co.nz/asciidoc/
[EPUB]: http://www.idpf.org/
[GPL]: http://www.gnu.org/copyleft/gpl.html "GNU General Public License"
[DZSlides]: http://paulrouget.com/dzslides/
[ISO 8601 format]: http://www.w3.org/TR/NOTE-datetime
[Word docx]: http://www.microsoft.com/interop/openup/openxml/default.aspx
[PDF]: http://www.adobe.com/pdf/
[reveal.js]: http://lab.hakim.se/reveal-js/
[FictionBook2]: http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1
[lua]: http://www.lua.org
[marc relators]: http://www.loc.gov/marc/relators/relaterm.html
[RFC5646]: http://tools.ietf.org/html/rfc5646